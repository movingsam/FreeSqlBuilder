@using FreeSqlBuilder.TemplateEngine.Utilities
@using FreeSqlBuilder.TemplateEngine
@model FreeSqlBuilder.TemplateEngine.BuildTask
@{
    Layout = "_Layout.cshtml";
    var project = Model.Project;
    var table = Model.CurrentTable;    
    var navigates = Model.GetNavigates();
}


using SFast.Infrastructure.Services;
using System.Threading.Tasks;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Logging;
using System.Collections.Generic;
using SFast.Infrastructure.Datas.Extensions;
using @(project.ProjectInfo.ProjectName).Repositories;
using @(project.ProjectInfo.ProjectName).@("Dtos.{TableName}".Replace("{TableName}",table.CsName));
@foreach (var navigate in navigates)
{
@:using @navigate.Value.Type.Namespace;
@:using @(project.ProjectInfo.ProjectName).@("Dtos.{TableName}".Replace("{TableName}",navigate.Value.CsName));
}
using @table.Type.Namespace;
using SFast.IServices;
using SFast.IRepositories;
using SFast.Infrastructure.Dtos;
@table.GetNameSpaceUsing()

namespace @(project.ProjectInfo.ProjectName).@(Model.CurrentBuilder.ReplaceTablePath(table.CsName).Replace("/","."))
{
@($"{(string.IsNullOrWhiteSpace(table.Comment) ? table.CsName : table.Comment)}服务".GetCSharpSummary())
    public class  @(Model.CurrentBuilder.GetName(table.CsName)) : ServiceBase, I@(Model.CurrentBuilder.GetName(table.CsName))
    {
    private readonly I@(project.GetBuilder("Repository").GetName(table.CsName))  _@(table.CsName.ToLower())Rep;
    @foreach (var navigate in navigates)
    {
        if(navigate.Value.CsName != table.CsName) { 
        @:private readonly I@(project.GetBuilder("Repository").GetName(navigate.Value.CsName)) _@(navigate.Value.CsName.ToLower())Rep;
        } 
    }

    @("构造函数".GetCSharpSummary())
    public @(Model.CurrentBuilder.GetName(table.CsName))(IServiceProvider service,ILogger<@(Model.CurrentBuilder.GetName(table.CsName))> logger):base(service,logger)
    {
    _@(table.CsName.ToLower() + "Rep") = service.GetRequiredService<@($"I{project.GetBuilder("Repository").GetName(table.CsName)}")>();
        @foreach (var navigate in navigates)
        {
            if(navigate.Value.CsName != table.CsName) { 
            @: _@(navigate.Value.CsName.ToLower() + "Rep") = service.GetRequiredService<@($"I{project.GetBuilder("Repository").GetName(navigate.Value.CsName)}")>();
            }
        }
    }

    @{ await Html.RenderPartialAsync("CURD/_CRUD.cshtml", new CurdTask(Model, table)); }
    @foreach (var navigate in navigates)
    {
        if(navigate.Value.CsName != table.CsName) { 
        @:@{ await Html.RenderPartialAsync("CURD/_CRUD.cshtml", new CurdTask(Model, navigate.Value)); }
        }
    }
    }
}
